function Square(props) {
  return (
    <button className={props.classHighlight} onClick={props.onClick}>
      {props.value}
    </button>
  );
}

class Board extends React.Component {
  renderSquare(i) {
    let highlight = 'square';
    const [a] = this.props.classHighlight;
    if(a){
      a.forEach(function(x){
        if(i === x){
          highlight = 'square highlight'
        }
      });
    }
    
    return (
      <Square
        key={i}
        classHighlight={highlight}
        value={this.props.squares[i]}
        onClick={() => this.props.onClick(i)}
      />
    );
  } 
  

  render() {
    const line = 3;
    let count = 0
    let row = [];
    for (let i = 0; i < line; i++){
      let col = [];
      for (let j = 0; j < line; j++){
        col.push(this.renderSquare(count++))
      }
      row.push(<div className="board-row" key={i.toString()}>{col}</div>)
    }
    
    return (
      <div>
        {row}
      </div>
    );
  }
}

class Game extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      history: [
        {
          squares: Array(9).fill(null)
        }
      ],
      stepNumber: 0,
      xIsNext: true,
      coord: '',
      sortMove: -1,
    };
  }

  handleClick(i) {
    const history = this.state.history.slice(0, this.state.stepNumber + 1);
    const current = history[history.length - 1];
    const squares = current.squares.slice();
    let coord = this.getCoord(i);
    if (calculateWinner(squares) || squares[i]) {
      return;
    }
    squares[i] = this.state.xIsNext ? "X" : "O";
    this.setState({
      history: history.concat([
        {
          squares: squares,
          coord: coord
        }
      ]),
      stepNumber: history.length,
      xIsNext: !this.state.xIsNext
    });
  }
  
  

  jumpTo(step) {
    this.setState({
      stepNumber: step,
      xIsNext: (step % 2) === 0
    });
  }
  
  getCoord(square) {
  const coord = [
    '0,0',
    '0,1',
    '0,2',
    '1,0',
    '1,1',
    '1,2',
    '2,0',
    '2,1',
    '2,2'
  ];
  return coord[square];
}
  boldSelected(state, move){
    if (state === move){
      return 'list-bold';
    }
    return '';
  }
  
  sortMoves(){
    this.setState({      
      sortMove: this.state.sortMove * (-1),
    });
  }

  render() {
    const history = this.state.history;
    const current = history[this.state.stepNumber];
    const winner = calculateWinner(current.squares);
    const moves = history.map((step, move) => {
    let classBold = this.boldSelected(this.state.stepNumber, move);      
      const desc = move ?
        'Go to move #' + move + ' coord: ' + history[move].coord :
        'Go to game start';      
      return (
        <li key={move}>
          <button className={classBold} onClick={() => this.jumpTo(move)}>{desc}</button>
        </li>
      );
    });
    moves.sort(() => this.state.sortMove);
    let status;
    let winners = [];
    if (winner) {
      winners.push(winner[1]);
      status = "Winner: " + winner[0];
    } else {
      if(this.state.stepNumber === 9){
        status = 'Draw';
      }else{
        status = "Next player: " + (this.state.xIsNext ? "X" : "O");
      }
    }    
    
    
    
    let sortTxt = (this.state.sortMove === -1) ? 'Asc' : 'Desc';
    
    return (
      <div className="game">
        <div className="game-board">
          <Board 
            classHighlight={winners}
            squares={current.squares}
            onClick={i => this.handleClick(i)}
          />
        </div>
        <div className="game-info">
          <div>{status}</div>
          <button onClick={() => this.sortMoves()}>{sortTxt}</button>
          <ol>{moves}</ol>
        </div>
      </div>
    );
  }
}

// ========================================

ReactDOM.render(<Game />, document.getElementById("root"));

function calculateWinner(squares) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      let result = [];
      result.push(squares[a]);
      result.push(lines[i])
      return result;
    }
  }
  return null;
}
